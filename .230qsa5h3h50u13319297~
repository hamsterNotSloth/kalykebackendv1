import bcrypt from "bcryptjs"; 
import User from "../model/userModal.js";
import jwt from "jsonwebtoken";

async function createUser(data) {
  const { userName, password, role, email } = data;
  try {
    if (!userName || !email || !password ) {
      throw new Error("Something is missing.");
    }
    const userExists = await User.findOne({ userName });
    if (userExists !== null) {
      throw new Error("User Already Exists");
    }
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    const newUser = new User({
      userName: userName,
      email: email,
      password: hashedPassword
    });
    await newUser.save();
    return { message: "User Successfully created", status: true };
  } catch (error) {
    throw error; 
  }
}

async function loginUser(userName, password) {
  try {

    const user = await User.findOne({
      userName: userName,
    });
    if (!user) {
      return null; 
    }
    const passwordChecker = await bcrypt.compare(password, user.password);
    if (!passwordChecker) {
      return null; 
    }
    const token = jwt.sign(
      {
        userName: user.userName,
        password: user.password,
        _id: user._id,
      },
      "secret_is_a_secret_for_user",
      {
        expiresIn: "1d",
      }
    );

    return token;
  } catch (err) {
    console.log(err);
    throw err;
  }
}

async function updateUser(_id, updatedUserData) {
  try {
    const existingUser = await User.findById(_id);
    if (!existingUser) {
      return null; 
    }

    existingUser.userName = updatedUserData.userName;
    existingUser.role = updatedUserData.role;

    const updatedUser = await existingUser.save();
    return updatedUser; 
  } catch (err) {
    console.log(err);
    throw err; 
  }
}

async function deleteUserById(_id) {
  try {
    const existingUser = await User.findById(_id);
    if (!existingUser) {
      return false; 
    }
    await User.findByIdAndDelete(_id);
    return true; 
  } catch (err) {
    console.log(err);
    throw err; 
  }
}

export default {
  createUser,
  loginUser,
  updateUser,
  deleteUserById,
};
